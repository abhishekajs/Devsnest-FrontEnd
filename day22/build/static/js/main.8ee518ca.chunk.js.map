{"version":3,"sources":["components/Templates.jsx","components/Meme.jsx","App.jsx","index.js"],"names":["Templates","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","res","json","data","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAqBeA,EArBG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAC9B,OACE,qBAAKC,UAAU,YAAf,SACGF,EAAUG,KAAI,SAACC,GAAD,OACb,qBAEEF,UAAU,WACVG,QAAS,WACPJ,EAAQG,IAJZ,SAOE,qBACEE,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MACxBN,UAAU,WARPE,EAASK,U,cC8CTC,EAjDF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,QACpB,EAAwBW,mBAAS,CAC/BC,YAAaF,EAAKF,GAClBK,SAAU,YACVC,SAAU,cACVC,MAAO,KAJT,mBAAOC,EAAP,KAAaC,EAAb,KAiBA,OACE,sBAAKhB,UAAU,OAAf,UACE,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BACG,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC9B,uBAEEC,KAAK,OACLC,YAAW,uBAAkBF,EAAQ,GACrCG,SAAU,SAACC,GACT,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACnCd,EAAQ,2BAAKD,GAAN,IAAYD,MAAOa,OANxB,cAWV,gCACE,wBAAQxB,QA5BO,WACnB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC8B,EAAKT,GACnBhB,GAAG,iBAAcgB,EAAd,mBAA8BS,EAAIH,SAEvCI,MAAM1B,GAAK2B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC1BF,MAAK,SAACG,GACLrC,EAAQ,2BAAKU,GAAN,IAAYH,IAAK8B,EAAKA,KAAK9B,WAqBhC,2BACA,wBACEH,QAAS,WACPJ,EAAQ,OAFZ,oCCXOsC,MAvBf,WACE,MAAkC3B,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBwC,EAAlB,KACA,EAAwB5B,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KASA,OAPAwC,qBAAU,WACRP,MAAM,qCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLE,EAAaF,EAAKA,KAAKI,YAE1B,IAED,sBAAKxC,UAAU,MAAf,UACE,gDACU,OAATS,EACC,cAAC,EAAD,CAAWX,UAAWA,EAAWC,QAASA,IAE1C,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QClBnC0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8ee518ca.chunk.js","sourcesContent":["const Templates = ({ templates, setMeme }) => {\r\n  return (\r\n    <div className=\"templates\">\r\n      {templates.map((template) => (\r\n        <div\r\n          key={template.id}\r\n          className=\"template\"\r\n          onClick={() => {\r\n            setMeme(template);\r\n          }}\r\n        >\r\n          <div\r\n            style={{ backgroundImage: `url(${template.url})` }}\r\n            className=\"image\"\r\n          ></div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Templates;\r\n","import { useState } from \"react\";\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n  const [form, setForm] = useState({\r\n    template_id: meme.id,\r\n    username: \"abhishek9\",\r\n    password: \"abhishek123\",\r\n    boxes: [],\r\n  });\r\n\r\n  const generateMeme = () => {\r\n    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n    form.boxes.map((box, index) => {\r\n      url += `&boxes[${index}][text]=${box.text}`;\r\n    });\r\n    fetch(url).then(res => res.json())\r\n    .then((data) => {\r\n      setMeme({ ...meme, url: data.data.url });\r\n    })\r\n  };\r\n  return (\r\n    <div className=\"meme\">\r\n      <img src={meme.url} alt=\"\" />\r\n      <div>\r\n        {[...Array(meme.box_count)].map((_, index) => (\r\n          <input\r\n            key=\"index\"\r\n            type=\"text\"\r\n            placeholder={`Meme Caption ${index + 1}`}\r\n            onChange={(e) => {\r\n              const newBoxes = form.boxes;\r\n              newBoxes[index] = { text: e.target.value };\r\n              setForm({ ...form, boxes: newBoxes });\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <button onClick={generateMeme}>Generate Meme</button>\r\n        <button\r\n          onClick={() => {\r\n            setMeme(null);\r\n          }}\r\n        >\r\n          Choose Template\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Templates from \"./components/Templates\";\nimport Meme from \"./components/Meme\";\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((data) => {\n        setTemplates(data.data.memes);\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {meme === null ? (\n        <Templates templates={templates} setMeme={setMeme} />\n      ) : (\n        <Meme meme={meme} setMeme={setMeme} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}